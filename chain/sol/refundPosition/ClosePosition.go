// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package refundPosition

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePosition is the `closePosition` instruction.
type ClosePosition struct {

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] positionAccount
	//
	// [2] = [] swapAccount
	//
	// [3] = [] cremaPositionNftMint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClosePositionInstructionBuilder creates a new `ClosePosition` instruction builder.
func NewClosePositionInstructionBuilder() *ClosePosition {
	nd := &ClosePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetAdminAccount sets the "admin" account.
func (inst *ClosePosition) SetAdminAccount(admin ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *ClosePosition) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccountAccount sets the "positionAccount" account.
func (inst *ClosePosition) SetPositionAccountAccount(positionAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionAccount).WRITE()
	return inst
}

// GetPositionAccountAccount gets the "positionAccount" account.
func (inst *ClosePosition) GetPositionAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapAccountAccount sets the "swapAccount" account.
func (inst *ClosePosition) SetSwapAccountAccount(swapAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swapAccount)
	return inst
}

// GetSwapAccountAccount gets the "swapAccount" account.
func (inst *ClosePosition) GetSwapAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCremaPositionNftMintAccount sets the "cremaPositionNftMint" account.
func (inst *ClosePosition) SetCremaPositionNftMintAccount(cremaPositionNftMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(cremaPositionNftMint)
	return inst
}

// GetCremaPositionNftMintAccount gets the "cremaPositionNftMint" account.
func (inst *ClosePosition) GetCremaPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst ClosePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePosition) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SwapAddress is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CremaPositionNftMint is not set")
		}
	}
	return nil
}

func (inst *ClosePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                swap", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("cremaPositionNftMint", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ClosePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClosePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClosePositionInstruction declares a new ClosePosition instruction with the provided parameters and accounts.
func NewClosePositionInstruction(
	// Accounts:
	admin ag_solanago.PublicKey,
	positionAccount ag_solanago.PublicKey,
	swapAccount ag_solanago.PublicKey,
	cremaPositionNftMint ag_solanago.PublicKey) *ClosePosition {
	return NewClosePositionInstructionBuilder().
		SetAdminAccount(admin).
		SetPositionAccountAccount(positionAccount).
		SetSwapAccountAccount(swapAccount).
		SetCremaPositionNftMintAccount(cremaPositionNftMint)
}
