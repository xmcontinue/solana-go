// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package refundPosition

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePosition is the `initializePosition` instruction.
type InitializePosition struct {
	OriginTokenAAmount *uint64
	OriginTokenBAmount *uint64
	RefundTokenAAmount *uint64
	RefundTokenBAmount *uint64
	CrmAmount          *uint64

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] positionAccount
	//
	// [2] = [WRITE] swapAccount
	//
	// [3] = [] cremaPositionNftMint
	//
	// [4] = [] cremaUserPosition
	//
	// [5] = [] systemProgram
	//
	// [6] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePositionInstructionBuilder creates a new `InitializePosition` instruction builder.
func NewInitializePositionInstructionBuilder() *InitializePosition {
	nd := &InitializePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetOriginTokenAAmount sets the "originTokenAAmount" parameter.
func (inst *InitializePosition) SetOriginTokenAAmount(originTokenAAmount uint64) *InitializePosition {
	inst.OriginTokenAAmount = &originTokenAAmount
	return inst
}

// SetOriginTokenBAmount sets the "originTokenBAmount" parameter.
func (inst *InitializePosition) SetOriginTokenBAmount(originTokenBAmount uint64) *InitializePosition {
	inst.OriginTokenBAmount = &originTokenBAmount
	return inst
}

// SetRefundTokenAAmount sets the "refundTokenAAmount" parameter.
func (inst *InitializePosition) SetRefundTokenAAmount(refundTokenAAmount uint64) *InitializePosition {
	inst.RefundTokenAAmount = &refundTokenAAmount
	return inst
}

// SetRefundTokenBAmount sets the "refundTokenBAmount" parameter.
func (inst *InitializePosition) SetRefundTokenBAmount(refundTokenBAmount uint64) *InitializePosition {
	inst.RefundTokenBAmount = &refundTokenBAmount
	return inst
}

// SetCrmAmount sets the "crmAmount" parameter.
func (inst *InitializePosition) SetCrmAmount(crmAmount uint64) *InitializePosition {
	inst.CrmAmount = &crmAmount
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializePosition) SetAdminAccount(admin ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializePosition) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccountAccount sets the "positionAccount" account.
func (inst *InitializePosition) SetPositionAccountAccount(positionAccount ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionAccount).WRITE()
	return inst
}

// GetPositionAccountAccount gets the "positionAccount" account.
func (inst *InitializePosition) GetPositionAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapAccountAccount sets the "swapAccount" account.
func (inst *InitializePosition) SetSwapAccountAccount(swapAccount ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swapAccount).WRITE()
	return inst
}

// GetSwapAccountAccount gets the "swapAccount" account.
func (inst *InitializePosition) GetSwapAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCremaPositionNftMintAccount sets the "cremaPositionNftMint" account.
func (inst *InitializePosition) SetCremaPositionNftMintAccount(cremaPositionNftMint ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(cremaPositionNftMint)
	return inst
}

// GetCremaPositionNftMintAccount gets the "cremaPositionNftMint" account.
func (inst *InitializePosition) GetCremaPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCremaUserPositionAccount sets the "cremaUserPosition" account.
func (inst *InitializePosition) SetCremaUserPositionAccount(cremaUserPosition ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(cremaUserPosition)
	return inst
}

// GetCremaUserPositionAccount gets the "cremaUserPosition" account.
func (inst *InitializePosition) GetCremaUserPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializePosition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializePosition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializePosition) SetRentAccount(rent ag_solanago.PublicKey) *InitializePosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializePosition) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst InitializePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OriginTokenAAmount == nil {
			return errors.New("OriginTokenAAmount parameter is not set")
		}
		if inst.OriginTokenBAmount == nil {
			return errors.New("OriginTokenBAmount parameter is not set")
		}
		if inst.RefundTokenAAmount == nil {
			return errors.New("RefundTokenAAmount parameter is not set")
		}
		if inst.RefundTokenBAmount == nil {
			return errors.New("RefundTokenBAmount parameter is not set")
		}
		if inst.CrmAmount == nil {
			return errors.New("CrmAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SwapAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CremaPositionNftMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CremaUserPosition is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OriginTokenAAmount", *inst.OriginTokenAAmount))
						paramsBranch.Child(ag_format.Param("OriginTokenBAmount", *inst.OriginTokenBAmount))
						paramsBranch.Child(ag_format.Param("RefundTokenAAmount", *inst.RefundTokenAAmount))
						paramsBranch.Child(ag_format.Param("RefundTokenBAmount", *inst.RefundTokenBAmount))
						paramsBranch.Child(ag_format.Param("         CrmAmount", *inst.CrmAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                swap", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("cremaPositionNftMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   cremaUserPosition", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj InitializePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OriginTokenAAmount` param:
	err = encoder.Encode(obj.OriginTokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `OriginTokenBAmount` param:
	err = encoder.Encode(obj.OriginTokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `RefundTokenAAmount` param:
	err = encoder.Encode(obj.RefundTokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `RefundTokenBAmount` param:
	err = encoder.Encode(obj.RefundTokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `CrmAmount` param:
	err = encoder.Encode(obj.CrmAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OriginTokenAAmount`:
	err = decoder.Decode(&obj.OriginTokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `OriginTokenBAmount`:
	err = decoder.Decode(&obj.OriginTokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `RefundTokenAAmount`:
	err = decoder.Decode(&obj.RefundTokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `RefundTokenBAmount`:
	err = decoder.Decode(&obj.RefundTokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `CrmAmount`:
	err = decoder.Decode(&obj.CrmAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePositionInstruction declares a new InitializePosition instruction with the provided parameters and accounts.
func NewInitializePositionInstruction(
	// Parameters:
	originTokenAAmount uint64,
	originTokenBAmount uint64,
	refundTokenAAmount uint64,
	refundTokenBAmount uint64,
	crmAmount uint64,
	// Accounts:
	admin ag_solanago.PublicKey,
	positionAccount ag_solanago.PublicKey,
	swapAccount ag_solanago.PublicKey,
	cremaPositionNftMint ag_solanago.PublicKey,
	cremaUserPosition ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializePosition {
	return NewInitializePositionInstructionBuilder().
		SetOriginTokenAAmount(originTokenAAmount).
		SetOriginTokenBAmount(originTokenBAmount).
		SetRefundTokenAAmount(refundTokenAAmount).
		SetRefundTokenBAmount(refundTokenBAmount).
		SetCrmAmount(crmAmount).
		SetAdminAccount(admin).
		SetPositionAccountAccount(positionAccount).
		SetSwapAccountAccount(swapAccount).
		SetCremaPositionNftMintAccount(cremaPositionNftMint).
		SetCremaUserPositionAccount(cremaUserPosition).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
