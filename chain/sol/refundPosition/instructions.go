// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package refundPosition

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/xmcontinue/solana-go"
	ag_text "github.com/xmcontinue/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "LpRefund"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeSwap = ag_binary.TypeID([8]byte{6, 45, 202, 225, 42, 39, 49, 249})

	Instruction_InitializePosition = ag_binary.TypeID([8]byte{219, 192, 234, 71, 190, 191, 102, 80})

	Instruction_RefundPosition = ag_binary.TypeID([8]byte{92, 200, 157, 98, 87, 187, 115, 172})

	Instruction_RefundPositionV2 = ag_binary.TypeID([8]byte{210, 63, 235, 211, 33, 100, 177, 146})

	Instruction_PauseSwapRefund = ag_binary.TypeID([8]byte{163, 22, 50, 113, 55, 192, 250, 247})

	Instruction_UnpauseSwapRefund = ag_binary.TypeID([8]byte{26, 47, 228, 88, 64, 196, 41, 156})

	Instruction_UpdatePosition = ag_binary.TypeID([8]byte{102, 75, 42, 126, 57, 196, 156, 9})

	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeSwap:
		return "InitializeSwap"
	case Instruction_InitializePosition:
		return "InitializePosition"
	case Instruction_RefundPosition:
		return "RefundPosition"
	case Instruction_RefundPositionV2:
		return "RefundPositionV2"
	case Instruction_PauseSwapRefund:
		return "PauseSwapRefund"
	case Instruction_UnpauseSwapRefund:
		return "UnpauseSwapRefund"
	case Instruction_UpdatePosition:
		return "UpdatePosition"
	case Instruction_ClosePosition:
		return "ClosePosition"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_swap", (*InitializeSwap)(nil),
		},
		{
			"initialize_position", (*InitializePosition)(nil),
		},
		{
			"refund_position", (*RefundPosition)(nil),
		},
		{
			"refund_position_v2", (*RefundPositionV2)(nil),
		},
		{
			"pause_swap_refund", (*PauseSwapRefund)(nil),
		},
		{
			"unpause_swap_refund", (*UnpauseSwapRefund)(nil),
		},
		{
			"update_position", (*UpdatePosition)(nil),
		},
		{
			"close_position", (*ClosePosition)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
